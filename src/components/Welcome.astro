<style>
  /* Desktop styles */
  .gallery-hero {
    height: calc(100vh - 40px); /* full viewport height parent */
    margin-top: 40px;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    box-sizing: border-box;
    width: 100%;
  }

  .gallery-container {
    display: flex;
    justify-content: center;
    align-items: center;
    flex: 1 1 auto; /* take available space inside .gallery-hero */
    margin: 0 auto;
    width: 100%;
    box-sizing: border-box;
  }

  .gallery-item {
    position: relative;
    /* explicit flex: grow shrink basis so hover grows predictably */
    flex: 1 1 0%;
    height: 70vh; /* reasonable viewport-based height */
    transition: flex 0.5s ease;
    overflow: hidden;
    margin: 0 0.5rem;
    min-width: 6rem;
  }

  .gallery-item:hover {
    flex: 1.5 1 0%;
    z-index: 1;
  }

  .gallery-item img,
  .gallery-item video {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .slideshow {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 0.5s ease;
  }

  .gallery-item:hover .slideshow {
    opacity: 1;
  }

  .slideshow img {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    opacity: 0;
    transition: opacity 1s ease;
  }

  .slideshow img.active {
    opacity: 1;
  }

  /* Media query for screens 900px or smaller */
  @media (max-width: 900px) {
    .gallery-container {
      overflow-x: hidden;
      max-width: 100%;
    }

    .gallery-container {
      position: relative;
      display: flex;
      justify-content: flex-start;
      overflow-x: auto;
      scroll-snap-type: x mandatory;
      -webkit-overflow-scrolling: touch;
      cursor: grab;
      /* Added padding to ensure first item can be centered */
      padding-left: calc(50% - 25vw);
      padding-right: calc(50% - 35vw);
    }

    .gallery-container:active {
      cursor: grabbing;
    }

    .gallery-container::-webkit-scrollbar {
      display: none; /* Hide scrollbar for Chrome, Safari, and Opera */
    }

    .gallery-item {
      flex: 0 0 auto;
      width: 40vw; /* Each item takes 70% of viewport width */
      margin: 0 10px;
      scroll-snap-align: center;
      transition: filter 0.5s ease;
    }

    /* Override desktop hover effects */
    .gallery-item:hover {
      flex: 0 0 auto;
    }

    /* Center item is in color */
    .gallery-item.center {
    }

    .gallery-item.center .slideshow {
      opacity: 1;
    }
  }

  @media (max-width: 500px) {
    .gallery-item {
      width: 70vw; /* Each item takes 70% of viewport width */
    }
  }

  .gallery-headings {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    text-align: center;
    margin: 0;
    padding-inline: 1rem;
    margin-top: auto; /* push to bottom of .gallery-hero */
  }

  .gallery-headings h1 {
    font-size: clamp(2rem, 5vw, 3rem);
    line-height: 1;
    max-width: 15ch;
    margin-inline: auto;
  }
  .gallery-headings h3 {
    font-family: "lato", sans-serif;
    margin: 0;
    line-height: 1.3;
    font-size: clamp(1.2rem, 3vw, 1.4rem);
    padding-bottom: 1rem;
  }
</style>

<div class="gallery-hero">
  <div class="gallery-container max-w-7xl" id="gallery">
    <!-- Image 1 (Static - NOT CURRENTLY USED) 
		<div class="gallery-item">
		  <img src="red.png" alt="Image 1" />
		</div>
		-->

    <!-- Image 2 (Video) -->
    <div class="gallery-item">
      <img src="img5-1.jpg" alt="Image 2" />
      <video class="slideshow" loop muted>
        <source src="img5-vid.mp4" type="video/mp4" />
        Your browser does not support the video tag.
      </video>
    </div>

    <!-- Image 3 (Slideshow) -->
    <div class="gallery-item">
      <img src="img1-1.jpg" alt="Image 3" />
      <div class="slideshow">
        <img src="img1-2.jpg" alt="Slide 1" class="active" />
        <img src="img1-3.jpg" alt="Slide 2" />
        <img src="img1-1.jpg" alt="Slide 3" />
      </div>
    </div>

    <!-- Add more gallery items as needed -->
    <div class="gallery-item">
      <img src="img2-1.jpg" alt="Image 3" />
      <div class="slideshow">
        <img src="img2-2.jpg" alt="Slide 1" class="active" />
        <img src="img2-3.jpg" alt="Slide 2" />
        <img src="img2-4.jpg" alt="Slide 3" />
        <img src="img2-1.jpg" alt="Slide 4" />
      </div>
    </div>

    <div class="gallery-item">
      <img src="img3-1.jpg" alt="Image 3" />
      <div class="slideshow">
        <img src="img3-2.jpg" alt="Slide 1" class="active" />
        <img src="img3-3.jpg" alt="Slide 2" />
        <img src="img3-1.jpg" alt="Slide 3" />
      </div>
    </div>

    <div class="gallery-item">
      <img src="img4-1.jpg" alt="Image 3" />
      <div class="slideshow">
        <img src="img4-2.jpg" alt="Slide 1" class="active" />
        <img src="img4-3.jpg" alt="Slide 2" />
        <img src="img4-4.jpg" alt="Slide 3" />
        <img src="img4-1.jpg" alt="Slide 3" />
      </div>
    </div>

    <div class="gallery-item">
      <img src="img6-1.jpg" alt="Image 3" />
      <div class="slideshow">
        <img src="img6-2.jpg" alt="Slide 1" class="active" />
        <img src="img6-3.jpg" alt="Slide 2" />
        <img src="img6-1.jpg" alt="Slide 3" />
      </div>
    </div>
    <div></div>
  </div>
  <div class="gallery-headings container max-w-2xl playfair">
    <h1 class="text-[var(--color-dark-blue)] font-semibold">
      Welcome to the Mystic Manes Salon
    </h1>
    <h3 class="text-[var(--color-dark-blue)] text-xl italic">
      You create your own beauty â€” let's unlock the magic in your hair.
    </h3>
  </div>
</div>
<script>
  // Hardened gallery script: explicit initializations, null checks, and JSDoc
  /** @type {HTMLElement | null} */
  const galleryContainer = document.getElementById("gallery");

  /** @type {HTMLElement[]} */
  const galleryItems = Array.from(
    document.querySelectorAll(".gallery-item")
  ).map((el) => /** @type {HTMLElement} */ (el));

  let activeItemIndex = 0; // First image is active initially

  // Global slideshow interval (single timer for mobile center slideshow)
  /** @type {number | null} */
  let globalSlideshowInterval = null;

  // Desktop functionality (video hover and slideshow per-item)
  document.querySelectorAll(".gallery-item video").forEach((videoEl) => {
    const video = /** @type {HTMLVideoElement} */ (videoEl);
    const parent = video.parentElement;
    if (!parent) return;
    const galleryItem = /** @type {HTMLElement} */ (parent);

    galleryItem.addEventListener("mouseenter", () => {
      if (window.innerWidth > 900) {
        video.play().catch(() => {});
      }
    });

    galleryItem.addEventListener("mouseleave", () => {
      if (window.innerWidth > 900) {
        try {
          video.pause();
          video.currentTime = 0;
        } catch (e) {}
      }
    });
  });

  document
    .querySelectorAll(".gallery-item .slideshow")
    .forEach((slideshowEl) => {
      const slideshow = /** @type {HTMLElement} */ (slideshowEl);
      if (slideshow.querySelector("video")) return; // skip video-based slideshows
      const galleryItem = /** @type {HTMLElement} */ (slideshow.parentElement);
      if (!galleryItem) return;

      const slides = Array.from(slideshow.querySelectorAll("img"));
      let currentSlide = 0;
      let slideInterval = 0;

      const nextSlide = () => {
        slides[currentSlide].classList.remove("active");
        currentSlide = (currentSlide + 1) % slides.length;
        slides[currentSlide].classList.add("active");
      };

      galleryItem.addEventListener("mouseenter", () => {
        if (window.innerWidth > 900 && slides.length > 1) {
          slideInterval = window.setInterval(nextSlide, 2000);
        }
      });

      galleryItem.addEventListener("mouseleave", () => {
        if (window.innerWidth > 900) {
          clearInterval(slideInterval);
          slides.forEach((s) => s.classList.remove("active"));
          currentSlide = 0;
          if (slides[0]) slides[0].classList.add("active");
        }
      });
    });

  // Mobile functionality helpers
  /**
   * Play media for a center item (video or slideshow)
   * @param {HTMLElement} item
   */
  function playActiveMedia(item) {
    if (!item) return;
    const video = /** @type {HTMLVideoElement | null} */ (
      item.querySelector("video")
    );
    if (video) {
      video.play().catch(() => {});
    }

    const slideshow = /** @type {HTMLElement | null} */ (
      item.querySelector(".slideshow:not(video)")
    );
    if (slideshow) {
      const slides = Array.from(slideshow.querySelectorAll("img"));
      let current = 0;
      // clear any existing global interval
      if (globalSlideshowInterval) {
        clearInterval(globalSlideshowInterval);
      }

      slides.forEach((s) => s.classList.remove("active"));
      if (slides[0]) slides[0].classList.add("active");

      globalSlideshowInterval = window.setInterval(() => {
        slides[current].classList.remove("active");
        current = (current + 1) % slides.length;
        slides[current].classList.add("active");
      }, 2000);
    }
  }

  /**
   * Stop all media (videos + global slideshow)
   */
  function stopAllMedia() {
    if (globalSlideshowInterval) {
      clearInterval(globalSlideshowInterval);
      globalSlideshowInterval = null;
    }

    galleryItems.forEach((item) => {
      const video = /** @type {HTMLVideoElement | null} */ (
        item.querySelector("video")
      );
      if (video) {
        try {
          video.pause();
          video.currentTime = 0;
        } catch (e) {}
      }
    });
  }

  /**
   * Update which item is centered based on scroll position (mobile)
   */
  function updateCenterItem() {
    if (window.innerWidth > 900) return;
    if (!galleryContainer) return;
    const containerRect = galleryContainer.getBoundingClientRect();
    const containerCenter = containerRect.left + containerRect.width / 2;

    let closestItem = /** @type {HTMLElement | null} */ (null);
    let closestDistance = Infinity;

    galleryItems.forEach((item, index) => {
      const itemRect = item.getBoundingClientRect();
      const itemCenter = itemRect.left + itemRect.width / 2;
      const distance = Math.abs(containerCenter - itemCenter);
      item.classList.remove("center");
      if (distance < closestDistance) {
        closestDistance = distance;
        closestItem = item;
        activeItemIndex = index;
      }
    });

    if (closestItem) {
      closestItem.classList.add("center");
      stopAllMedia();
      playActiveMedia(closestItem);
    }
  }

  /** @param {HTMLElement} item */
  function centerItem(item) {
    if (window.innerWidth > 900) return;
    item.scrollIntoView({
      behavior: "smooth",
      block: "nearest",
      inline: "center",
    });
  }

  function initMobileView() {
    if (window.innerWidth > 900) return;
    galleryItems.forEach((item) => item.classList.remove("center"));
    if (galleryItems[activeItemIndex]) {
      galleryItems[activeItemIndex].classList.add("center");
      playActiveMedia(galleryItems[activeItemIndex]);
      setTimeout(() => centerItem(galleryItems[activeItemIndex]), 100);
    }
  }

  // Draggable support for mobile-like horizontal scroll
  let isDragging = false;
  let startX = 0;
  let scrollLeft = 0;

  if (galleryContainer) {
    galleryContainer.addEventListener("mousedown", (e) => {
      if (window.innerWidth <= 900) {
        isDragging = true;
        startX = e.pageX - galleryContainer.offsetLeft;
        scrollLeft = galleryContainer.scrollLeft;
        galleryContainer.style.cursor = "grabbing";
      }
    });

    galleryContainer.addEventListener("mouseleave", () => {
      isDragging = false;
      galleryContainer.style.cursor = "grab";
    });

    galleryContainer.addEventListener("mouseup", () => {
      isDragging = false;
      galleryContainer.style.cursor = "grab";
    });

    galleryContainer.addEventListener("mousemove", (e) => {
      if (!isDragging) return;
      e.preventDefault();
      const x = e.pageX - galleryContainer.offsetLeft;
      const walk = (x - startX) * 2;
      galleryContainer.scrollLeft = scrollLeft - walk;
    });

    // scroll detection
    let scrollTimeout = 0;
    galleryContainer.addEventListener("scroll", () => {
      if (window.innerWidth <= 900) {
        clearTimeout(scrollTimeout);
        scrollTimeout = window.setTimeout(updateCenterItem, 150);
      }
    });
  }

  window.addEventListener("resize", () => {
    if (window.innerWidth <= 900) {
      initMobileView();
    } else {
      stopAllMedia();
      galleryItems.forEach((item) => item.classList.remove("center"));
    }
  });

  window.addEventListener("load", initMobileView);
  setTimeout(() => {
    if (window.innerWidth <= 900) initMobileView();
  }, 300);
</script>
